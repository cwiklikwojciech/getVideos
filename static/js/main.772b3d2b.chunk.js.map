{"version":3,"sources":["logo.svg","features/counter/counterSlice.js","features/counter/Counter.js","features/counter/reactPlayer.js","features/counter/Posts.js","features/counter/Tiles.js","features/counter/Pagination.js","features/counter/TodoItem.js","App.js","app/store.js","serviceWorker.js","index.js"],"names":["counterSlice","createSlice","name","initialState","todoList","isVisible","reducers","setCheck","state","action","x","map","item","payload","id","splice","setVideo","push","setVisible","actions","saveTodo","selectTodoList","todos","selectIsVisible","Counter","dispatch","useDispatch","useState","incrementAmount","setIncrementAmount","setIsVisible","lastPartAfterSign","str","separator","stringSarach","n","search","result","substring","lastIndexOf","length","className","type","value","onChange","e","target","onClick","console","log","fetch","then","response","json","data","itemView","items","statistics","viewCount","itemLike","likeCount","image","snippet","thumbnails","medium","url","imageSmall","default","title","published","publishedAt","video","done","Date","now","ModalExample","props","buttonLabel","modal","setModal","toggle","Button","color","Modal","isOpen","ModalHeader","ModalBody","width","height","ModalFooter","Posts","loading","like","view","sm","src","alt","Tiles","CardGroup","Card","CardImg","top","CardBody","CardTitle","tag","CardSubtitle","CardText","Pagination","postsPerPage","totalPosts","paginate","pageNumbers","i","Math","ceil","number","href","TodoItem","list","setPosts","setLoading","currentPage","setCurrentPage","postsPerPageTiles","useEffect","a","fetchPosts","indexOfLastPost","indexOfFirstPost","currentPosts","slice","indexOfLastPostTiles","indexOfFirstPostTiles","currentPostsTiles","pageNumber","post","App","useSelector","configureStore","reducer","counterReducer","Boolean","window","location","hostname","match","ReactDOM","render","Fragment","store","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"uJAAe,I,sBCQTA,EAAeC,YAAY,CAC/BC,KAAM,IACNC,aAPmB,CACnBC,SAAU,GACVC,UAAW,GAMXC,SAAU,CAENC,SAAU,SAACC,EAAMC,GACf,IAAIC,EAAE,EACJF,EAAMJ,SAASO,KAAI,SAAAC,GACdH,EAAOI,UAAYD,EAAKE,IACzBN,EAAMJ,SAASW,OAAOL,EAAE,GAE1BA,QAINM,SAAU,SAACR,EAAMC,GACfD,EAAMJ,SAASa,KAAKR,EAAOI,UAI/BK,WAAY,SAACV,EAAMC,GACjBD,EAAMH,UAAYI,EAAOI,Y,EAK+Bb,EAAamB,QAAjDZ,G,EAAXa,S,EAAWb,UAAWS,E,EAAAA,SAAUE,E,EAAAA,WAElCG,EAAiB,SAAAb,GAAK,OAAIA,EAAMc,MAAMlB,UACtCmB,EAAkB,SAAAf,GAAK,OAAIA,EAAMc,MAAMjB,WAGrCL,IAAf,Q,qBChCO,SAASwB,IACd,IAAMC,EAAWC,cADO,EAEsBC,mBAAS,IAF/B,mBAEjBC,EAFiB,KAEAC,EAFA,OAGUF,oBAAS,GAHnB,mBAGjBtB,EAHiB,KAGNyB,EAHM,KAKlBC,EAAoB,SAACC,GAAwB,IAAnBC,EAAkB,uDAAR,IAEpCC,EAAeF,EACfG,EAAID,EAAaE,OAAOH,GAE5B,IAAU,IAAPE,EACD,OAAOH,EAGP,IAAIK,EAASL,EAAIM,UAAUN,EAAIO,YAAYN,GAAW,GAMtD,OALAI,EAAUA,GAAUL,GAAMK,GAChBG,OAAS,KAEjBH,GADAA,EAASL,EAAIM,UAAUN,EAAIO,YAAY,KAAK,KACxBP,GAAMK,GAErBA,GAyCX,OACE,sBAAKI,UAAU,QAAf,UACA,uBAAOC,KAAK,OAAOC,MAAOf,EACxBgB,SAAU,SAAAC,GAAC,OAAIhB,EAAmBgB,EAAEC,OAAOH,UAC7C,wBACII,QA1CU,WAEdC,QAAQC,IAAR,iBAAsBlB,EAAkBH,KAES,IAA9CG,EAAkBH,GAAiBY,OAClCU,MAAM,iDAIVA,MAAM,mDAAD,OAAoDnB,EAAkBH,GAAtE,+FACAuB,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAI,OACR7B,EAAST,EAAS,CAChBuC,SAAWD,EAAKE,MAAM,GAAGC,WAAWC,UACpCC,SAAYL,EAAKE,MAAM,GAAGC,WAAWG,UACrCC,MAAOP,EAAKE,MAAM,GAAGM,QAAQC,WAAWC,OAAOC,IAC/CC,WAAYZ,EAAKE,MAAM,GAAGM,QAAQC,WAAWI,QAAQF,IACrDG,MAAQd,EAAKE,MAAM,GAAGM,QAAQM,MAC9BC,UAAYf,EAAKE,MAAM,GAAGM,QAAQQ,YAClCC,MAAQxC,EAAkBH,GAC1B4C,MAAM,EACN1D,GAAI2D,KAAKC,aAoBjB,mBAGA,wBACI3B,QAhBgB,WAClBjB,GAAczB,GAEdoB,EAASP,EAAY,CACnBb,UAAYA,MAWhB,yB,uHClCWsE,G,MApCM,SAACC,GAAW,IAE7BC,EAGED,EAHFC,YACApC,EAEEmC,EAFFnC,UACAwB,EACEW,EADFX,IAJ4B,EAOJtC,oBAAS,GAPL,mBAOvBmD,EAPuB,KAOhBC,EAPgB,KAUxBC,EAAS,kBAAMD,GAAUD,IAE/B,OACE,gCACE,cAACG,EAAA,EAAD,CAAQC,MAAM,SAAUnC,QAASiC,EAAjC,SAA0CH,IAC1C,eAACM,EAAA,EAAD,CAAOC,OAAQN,EAAOE,OAAQA,EAAQvC,UAAWA,EAAjD,UACE,cAAC4C,EAAA,EAAD,CAAaL,OAAQA,EAArB,yBACA,cAACM,EAAA,EAAD,UACA,qBAAK7C,UAAU,iBAAf,SACI,cAAC,IAAD,CACIA,UAAU,eACVwB,IAAMA,EACNsB,MAAM,OACNC,OAAO,aAIf,eAACC,EAAA,EAAD,WACE,cAACR,EAAA,EAAD,CAAQC,MAAM,UAAUnC,QAASiC,EAAjC,0BAA+D,IAC/D,cAACC,EAAA,EAAD,CAAQC,MAAM,YAAYnC,QAASiC,EAAnC,+BCwCKU,EA7DD,SAAC,GAA4E,IAA1E5E,EAAyE,EAAzEA,GAAI6E,EAAqE,EAArEA,QAAUlE,EAA2D,EAA3DA,SAASoC,EAAkD,EAAlDA,MAAMO,EAA4C,EAA5CA,MAAQwB,EAAoC,EAApCA,KAAMC,EAA8B,EAA9BA,KAAMxB,EAAwB,EAAxBA,UAAWE,EAAa,EAAbA,MAAa,EAE9D5C,oBAAS,GAFqD,6BAIxF,GAAIgE,EACF,OAAO,4CAIT,IAII1B,EAAG,0CAAuCM,GAE9C,OACE,mCAEA,oBAAI9B,UAAU,kBAAd,SACC,oBAAIA,UAAU,kBAAd,SACA,cAAC,YAAD,UACI,eAAC,MAAD,WACH,cAAC,MAAD,CAAKqD,GAAI,EAAT,SAGA,qBAAKrD,UAAU,UAAf,SACE,qBAAKA,UAAU,SAAf,SAEA,qBAAKA,UAAU,YAAYsD,IAAKlC,EAAOmC,IAAI,0BAQ7C,eAAC,MAAD,CAAKF,GAAI,EAAT,UACE,6BAAK1B,IACL,6BAAKwB,IACL,6BAAKC,IACL,6BAAKxB,OAGP,eAAC,MAAD,CAAKyB,GAAI,EAAT,UACE,wBAAQ/C,QAnCM,WAClBtB,EAASlB,EAASO,KAkCd,uBACA,cAAC,EAAD,CAAc+D,YAAa,UAAWZ,IAAKA,mB,+DCHpCgC,EAtCD,SAAC,GAA0E,IAAxEnF,EAAuE,EAAvEA,GAAI6E,EAAmE,EAAnEA,QAAUlE,EAAyD,EAAzDA,SAASoC,EAAgD,EAAhDA,MAAMO,EAA0C,EAA1CA,MAAQwB,EAAkC,EAAlCA,KAAMC,EAA4B,EAA5BA,KAAMxB,EAAsB,EAAtBA,UAAUE,EAAY,EAAZA,MAAY,EAE5D5C,oBAAS,GAFmD,6BAGtF,GAAIgE,EACF,OAAO,4CAIT,IAIM1B,EAAG,0CAAuCM,GAGhD,OACE,mCACgB,cAAC,MAAD,CAAMuB,GAAI,EAAV,SACG,cAACI,EAAA,EAAD,UACC,eAACC,EAAA,EAAD,WACI,cAACC,EAAA,EAAD,CAASC,KAAG,EAACN,IAAKlC,EAAQmC,IAAI,mBAC9B,eAACM,EAAA,EAAD,WACA,cAACC,EAAA,EAAD,CAAWC,IAAI,KAAf,SAAqBpC,IACrB,eAACqC,EAAA,EAAD,CAAcD,IAAI,KAAK/D,UAAU,kBAAjC,8BAAqE4B,KACrE,eAACqC,EAAA,EAAD,qBAAkBb,EAAlB,WAAgCD,KAChC,wBAAQ7C,QAjBd,WAClBtB,EAASlB,EAASO,KAgBM,uBACA,cAAC,EAAD,CAAc+D,YAAa,UAAWZ,IAAKA,iBCpBxD0C,EAtBI,SAAC,GAGlB,IAH8D,IAA1CC,EAAyC,EAAzCA,aAAcC,EAA2B,EAA3BA,WAAYC,EAAe,EAAfA,SACxCC,EAAc,GAEXC,EAAI,EAAGA,GAAKC,KAAKC,KAAKL,EAAaD,GAAeI,IACzDD,EAAY9F,KAAK+F,GAGnB,OACE,8BACE,oBAAKvE,UAAU,aAAf,SACGsE,EAAYpG,KAAI,SAAAwG,GAAM,OACrB,oBAAiB1E,UAAU,YAA3B,SACE,mBAAGM,QAAS,kBAAM+D,EAASK,IAASC,KAAK,KAAK3E,UAAU,YAAxD,SACG0E,KAFIA,WCmGJE,EAjGE,SAAC,GAAuB,IAAtBC,EAAqB,EAArBA,KAAMjH,EAAe,EAAfA,UAAe,EAGVsB,mBAAS,IAHC,mBAGtB4F,GAHsB,aAIN5F,oBAAS,GAJH,mBAI7BgE,EAJ6B,KAIpB6B,EAJoB,OAKE7F,mBAAS,GALX,mBAK7B8F,EAL6B,KAKhBC,EALgB,OAMb/F,mBAAS,GAAzBiF,EAN6B,sBAORjF,mBAAS,GAA9BgG,EAP6B,oBASpCC,qBAAU,YACU,uCAAG,sBAAAC,EAAA,sDACjBL,GAAW,GACXD,EAASD,GACTE,GAAW,GAHM,2CAAH,qDAMhBM,KACC,IAEH,IAAMC,EAAkBN,EAAcb,EAChCoB,EAAmBD,EAAkBnB,EACrCqB,EAAeX,EAAKY,MAAMF,EAAkBD,GAE5CI,EAAuBV,EAAcE,EACrCS,EAAwBD,EAAuBR,EAC/CU,EAAoBf,EAAKY,MAAME,EAAuBD,GAEtDrB,EAAW,SAAAwB,GAAU,OAAIZ,EAAeY,IAExC7G,EAAWC,cAGnB,OACA,mCAEQrB,EACI,sBAAKoC,UAAU,iBAAf,UACCwF,EAAatH,KAAI,SAAA4H,GAAI,OACnB,cAAC,EAAD,CAEEzH,GAAIyH,EAAKzH,GACT6E,QAASA,EACTlE,SAAUA,EACVoC,MAAO0E,EAAK1E,MACZO,MAAOmE,EAAKnE,MACZwB,KAAM2C,EAAK5E,SACXkC,KAAM0C,EAAKhF,SACXc,UAAWkE,EAAKlE,UAChBE,MAAOgE,EAAKhE,OATPgE,EAAKzH,OAaf,cAAC,EAAD,CACI8F,aAAcA,EACdC,WAAYS,EAAK9E,OACjBsE,SAAUA,OAMd,qCACJ,cAAC,YAAD,UACA,cAAC,MAAD,UAEIuB,EAAkB1H,KAAI,SAAA4H,GAAI,OACvB,cAAC,EAAD,CAEAzH,GAAIyH,EAAKzH,GACT6E,QAASA,EACTlE,SAAUA,EACVoC,MAAO0E,EAAK1E,MACZO,MAAOmE,EAAKnE,MACZwB,KAAM2C,EAAK5E,SACXkC,KAAM0C,EAAKhF,SACXc,UAAWkE,EAAKlE,UAChBE,MAAOgE,EAAKhE,OATPgE,EAAKzH,WAgBjB,cAAC,EAAD,CAAY2B,UAAU,aACdmE,aAAce,EACdd,WAAYS,EAAK9E,OACjBsE,SAAUA,UC5Ef0B,MAbf,WACE,IAAMpI,EAAWqI,YAAYpH,GACvBhB,EAAYoI,YAAYlH,GAE9B,OACE,sBAAKkB,UAAU,MAAf,UACC,cAAC,EAAD,IACK,cAAC,EAAD,CAAU6E,KAAMlH,EAAUC,UAAWA,EAAUA,gBChB1CqI,cAAe,CAC5BC,QAAS,CACPrH,MAAOsH,KCOSC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,OCTNC,IAASC,OACP,cAAC,IAAMC,SAAP,UACE,cAAC,IAAD,CAAUC,MAAOA,EAAjB,SACE,cAAC,EAAD,QAGJC,SAASC,eAAe,SDoHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMvG,MAAK,SAAAwG,GACjCA,EAAaC,iB","file":"static/js/main.772b3d2b.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.db36153e.svg\";","import { createSlice } from '@reduxjs/toolkit';\r\n\r\n\r\nconst initialState = {\r\n  todoList: [],\r\n  isVisible: 0\r\n}\r\n\r\nconst counterSlice = createSlice({\r\n  name: 'x',\r\n  initialState,\r\n  reducers: {     \r\n    \r\n      setCheck: (state,action) => {\r\n        let x=0;\r\n          state.todoList.map(item => {\r\n            if(action.payload === item.id){\r\n              state.todoList.splice(x,1);\r\n            }\r\n            x++;\r\n          })\r\n      },\r\n\r\n      setVideo: (state,action) => {\r\n        state.todoList.push(action.payload); \r\n        \r\n    },\r\n\r\n    setVisible: (state,action) => {\r\n      state.isVisible = action.payload;\r\n  },\r\n  }\r\n});\r\n\r\nexport const { saveTodo , setCheck , setVideo, setVisible } = counterSlice.actions;\r\n\r\nexport const selectTodoList = state => state.todos.todoList\r\nexport const selectIsVisible = state => state.todos.isVisible\r\n\r\n\r\nexport default counterSlice.reducer;\r\n","import React, { useState } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { saveTodo, setVideo , setVisible} from './counterSlice';\r\n\r\nimport axios from 'axios';\r\n\r\nimport './Counter.css';\r\n\r\nexport function Counter() {\r\n  const dispatch = useDispatch();\r\n  const [incrementAmount, setIncrementAmount] = useState('');\r\n  const [isVisible, setIsVisible] = useState(true);\r\n\r\n  const lastPartAfterSign = (str, separator='/') => {\r\n\r\n    var stringSarach = str; \r\n    var n = stringSarach.search(separator);\r\n\r\n    if(n === -1){\r\n      return str;\r\n    }\r\n    else {\r\n      let result = str.substring(str.lastIndexOf(separator)+1);\r\n      result =  result != str ? result : false;\r\n      if(result.length > 11 ) {\r\n        result = str.substring(str.lastIndexOf('=')+1);\r\n        result =  result != str ? result : false;\r\n      }\r\n      return result;\r\n    } \r\n  }\r\n\r\n  const addTodo = () => {\r\n\r\n    console.log(`Adding ${lastPartAfterSign(incrementAmount)}`);\r\n\r\n    if(lastPartAfterSign(incrementAmount).length === 9){\r\n        fetch('https://vimeo.com/api/v2/video/181696349/json');\r\n        \r\n    } else{\r\n    \r\n    fetch(`https://www.googleapis.com/youtube/v3/videos?id=${lastPartAfterSign(incrementAmount)}&key=AIzaSyDPQ653rSjnsN9tmexU7CmkDKc5t_2t5Jo&part=snippet,contentDetails,statistics,status`)\r\n        .then(response => response.json())\r\n        .then(data => \r\n          dispatch(setVideo({\r\n            itemView : data.items[0].statistics.viewCount,\r\n            itemLike :  data.items[0].statistics.likeCount,\r\n            image: data.items[0].snippet.thumbnails.medium.url,\r\n            imageSmall: data.items[0].snippet.thumbnails.default.url,\r\n            title : data.items[0].snippet.title,\r\n            published : data.items[0].snippet.publishedAt,\r\n            video : lastPartAfterSign(incrementAmount),\r\n            done: false,\r\n            id: Date.now(),\r\n           }))\r\n        );\r\n\r\n          }\r\n        \r\n  }\r\n\r\n  const changeVisible = () => {\r\n      setIsVisible(!isVisible);\r\n\r\n      dispatch(setVisible ({\r\n        isVisible : isVisible\r\n      }))\r\n  }\r\n\r\n  return (\r\n    <div className='input'>\r\n    <input type=\"text\" value={incrementAmount} \r\n      onChange={e => setIncrementAmount(e.target.value)} />\r\n    <button \r\n        onClick={addTodo} >\r\n    Add! </button>\r\n    <button \r\n        onClick={changeVisible}>\r\n    Visible </button>\r\n    \r\n</div>\r\n  );\r\n}\r\n","import React, { useState } from 'react';\r\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter } from 'reactstrap';\r\nimport ReactPlayer from 'react-player'\r\n\r\nimport './Posts.css'\r\n\r\nconst ModalExample = (props) => {\r\n  const {\r\n    buttonLabel,\r\n    className,\r\n    url\r\n  } = props;\r\n\r\n  const [modal, setModal] = useState(false);\r\n//   const url = `https://www.youtube.com/watch?v=${video}`\r\n\r\n  const toggle = () => setModal(!modal);\r\n\r\n  return (\r\n    <div>\r\n      <Button color=\"danger\"  onClick={toggle}>{buttonLabel}</Button>\r\n      <Modal isOpen={modal} toggle={toggle} className={className}>\r\n        <ModalHeader toggle={toggle}>Modal title</ModalHeader>\r\n        <ModalBody>\r\n        <div className='player-wrapper'>\r\n            <ReactPlayer\r\n                className='react-player'\r\n                url= {url}\r\n                width='100%'\r\n                height='100%'\r\n            />\r\n        </div>\r\n        </ModalBody>\r\n        <ModalFooter>\r\n          <Button color=\"primary\" onClick={toggle}>Do Something</Button>{' '}\r\n          <Button color=\"secondary\" onClick={toggle}>Cancel</Button>\r\n        </ModalFooter>\r\n      </Modal>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ModalExample;","import React,{useState} from 'react'\r\n\r\nimport ReactDOM from 'react-dom'\r\nimport ModalVideo from 'react-modal-video'\r\n\r\nimport {useDispatch} from 'react-redux'\r\nimport {setCheck, setVideo} from './counterSlice'\r\nimport { Container, Row, Col } from 'react-grid-system';\r\n\r\nimport ReactPlayer from 'react-player'\r\nimport ModalExample from \"./reactPlayer\";\r\n\r\nimport './Posts.css'\r\n\r\nconst Posts = ({ id, loading , dispatch,image,title , like, view, published ,video  }) => {\r\n\r\n  const [isOpen, setOpen] = useState(false)\r\n\r\n  if (loading) {\r\n    return <h2>Loading...</h2>;\r\n  }\r\n\r\n\r\n  const handleCheck = () => {\r\n    dispatch(setCheck(id))\r\n    }\r\n    \r\n  let url =  `https://www.youtube.com/watch?v=${video}`;\r\n\r\n  return (\r\n    <>\r\n  \r\n    <ul className='list-group mb-4'>\r\n     <li className='list-group-item'>\r\n     <Container>\r\n         <Row> \r\n      <Col sm={3}>\r\n\r\n      \r\n      <div className=\"outside\">\r\n        <div className=\"inside\">\r\n       \r\n        <img className=\"thumbnail\" src={image} alt=\"BigCo Inc. logo\" /> \r\n\r\n        \r\n      \r\n        </div>\t\t\r\n    </div>\r\n      \r\n      </Col>\r\n      <Col sm={7}>\r\n        <h5>{title}</h5>\r\n        <h6>{like}</h6>\r\n        <h6>{view}</h6>\r\n        <h6>{published}</h6>\r\n       \r\n      </Col>\r\n      <Col sm={2}>\r\n        <button onClick={handleCheck}>Usuń</button>\r\n        <ModalExample buttonLabel={'Zobacz!'} url={url} />\r\n      </Col>\r\n     \r\n     \r\n      </Row> \r\n        </Container>\r\n    \r\n    </li>\r\n     \r\n    </ul>\r\n\r\n   \r\n            </>\r\n  );\r\n};\r\n\r\nexport default Posts;","import React, {useState} from 'react'\r\n\r\nimport {useDispatch} from 'react-redux'\r\nimport {setCheck, setVideo} from './counterSlice'\r\n\r\nimport ReactPlayer from 'react-player'\r\n\r\nimport {\r\n    Card, Button, CardImg, CardTitle, CardText, CardGroup,\r\n    CardSubtitle, CardBody\r\n  } from 'reactstrap';\r\n\r\n  import { Col } from 'react-grid-system';\r\n\r\n  import ModalVideo from 'react-modal-video'\r\n  import ModalExample from \"./reactPlayer\";\r\n\r\n\r\nconst Tiles = ({ id, loading , dispatch,image,title , like, view, published,video }) => {\r\n\r\n  const [isOpen, setOpen] = useState(false)\r\n  if (loading) {\r\n    return <h2>Loading...</h2>;\r\n  }\r\n\r\n\r\n  const handleCheck = () => {\r\n    dispatch(setCheck(id))\r\n    }\r\n  \r\n    let url =  `https://www.youtube.com/watch?v=${video}`;\r\n    \r\n\r\n  return (\r\n    <>\r\n                    <Col  sm={6} >\r\n                       <CardGroup>\r\n                        <Card>\r\n                            <CardImg top src={image}  alt=\"Card image cap\" />\r\n                            <CardBody>\r\n                            <CardTitle tag=\"h5\">{title}</CardTitle>\r\n                            <CardSubtitle tag=\"h6\" className=\"mb-2 text-muted\">Published Data : {published}</CardSubtitle>\r\n                            <CardText>View : {view} Like : {like}</CardText>\r\n                            <button onClick={handleCheck}>Usuń</button>\r\n                            <ModalExample buttonLabel={'Zobacz!'} url={url} />\r\n                            </CardBody>\r\n                        </Card>\r\n                        </CardGroup>\r\n                        \r\n                        </Col> \r\n                        \r\n                  </>      \r\n  );\r\n  \r\n};\r\n\r\nexport default Tiles;","import React from 'react';\r\n\r\nconst Pagination = ({ postsPerPage, totalPosts, paginate }) => {\r\n  const pageNumbers = [];\r\n\r\n  for (let i = 1; i <= Math.ceil(totalPosts / postsPerPage); i++) {\r\n    pageNumbers.push(i);\r\n  }\r\n\r\n  return (\r\n    <nav>\r\n      <ul  className='pagination'>\r\n        {pageNumbers.map(number => (\r\n          <li key={number} className='page-item'>\r\n            <a onClick={() => paginate(number)} href='!#' className='page-link'>\r\n              {number}\r\n            </a>\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </nav>\r\n  );\r\n};\r\n\r\nexport default Pagination;","import React, {useState, useEffect} from 'react'\r\nimport axios from 'axios'\r\n\r\nimport './TodoItem.css'\r\n\r\nimport Posts from './Posts';\r\nimport Tiles from './Tiles';\r\nimport Pagination from './Pagination';\r\n\r\n\r\n\r\nimport { Container, Row, Col } from 'react-grid-system';\r\nimport {useDispatch} from 'react-redux'\r\n\r\n\r\nconst TodoItem = ({list, isVisible}) => {\r\n    \r\n\r\n    const [posts, setPosts] = useState([]);\r\n    const [loading, setLoading] = useState(true);\r\n    const [currentPage, setCurrentPage] = useState(1);\r\n    const [postsPerPage] = useState(5);\r\n    const [postsPerPageTiles] = useState(4);\r\n  \r\n    useEffect(() => {\r\n        const fetchPosts = async () => {\r\n          setLoading(true);\r\n          setPosts(list);\r\n          setLoading(false);\r\n        };\r\n    \r\n        fetchPosts();\r\n      }, []);\r\n\r\n      const indexOfLastPost = currentPage * postsPerPage;\r\n      const indexOfFirstPost = indexOfLastPost - postsPerPage;\r\n      const currentPosts = list.slice(indexOfFirstPost, indexOfLastPost);\r\n\r\n      const indexOfLastPostTiles = currentPage * postsPerPageTiles;\r\n      const indexOfFirstPostTiles = indexOfLastPostTiles - postsPerPageTiles;\r\n      const currentPostsTiles = list.slice(indexOfFirstPostTiles, indexOfLastPostTiles);\r\n\r\n      const paginate = pageNumber => setCurrentPage(pageNumber);\r\n\r\n      const dispatch = useDispatch();\r\n\r\n\r\n    return (\r\n    <>\r\n    {\r\n            isVisible ?  (\r\n                <div className='container mt-5'>\r\n                {currentPosts.map(post => (\r\n                   <Posts \r\n                     key={post.id} \r\n                     id={post.id}\r\n                     loading={loading}\r\n                     dispatch={dispatch}\r\n                     image={post.image} \r\n                     title={post.title} \r\n                     like={post.itemLike} \r\n                     view={post.itemView}\r\n                     published={post.published}    \r\n                     video={post.video}\r\n                     />\r\n                ))}\r\n                \r\n                <Pagination \r\n                    postsPerPage={postsPerPage}\r\n                    totalPosts={list.length}\r\n                    paginate={paginate}\r\n                />\r\n                </div>\r\n            )\r\n            :\r\n            (\r\n                <>\r\n            <Container>\r\n            <Row> \r\n              \r\n               {currentPostsTiles.map(post => (\r\n                   <Tiles \r\n                   key={post.id} \r\n                   id={post.id}\r\n                   loading={loading} \r\n                   dispatch={dispatch} \r\n                   image={post.image} \r\n                   title={post.title} \r\n                   like={post.itemLike} \r\n                   view={post.itemView}\r\n                   published={post.published}  \r\n                   video={post.video}\r\n                   />\r\n                ))}\r\n\r\n            </Row>\r\n            </Container> \r\n\r\n            <Pagination className=\"pagination\"\r\n                    postsPerPage={postsPerPageTiles}\r\n                    totalPosts={list.length}\r\n                    paginate={paginate}\r\n                />\r\n\r\n            </>\r\n            )\r\n    }\r\n      </>\r\n    \r\n    );\r\n}\r\n\r\nexport default TodoItem\r\n","import React, {useState} from 'react';\r\nimport logo from './logo.svg';\r\nimport { Counter } from './features/counter/Counter';\r\nimport './App.css';\r\nimport TodoItem from './features/counter/TodoItem';\r\nimport Posts from './features/counter/Posts';\r\n\r\nimport {useSelector} from 'react-redux'\r\nimport {selectTodoList} from './features/counter/counterSlice'\r\nimport {selectIsVisible} from './features/counter/counterSlice'\r\nimport { Container, Row, Col } from 'react-grid-system';\r\n\r\nfunction App() {\r\n  const todoList = useSelector(selectTodoList);\r\n  const isVisible = useSelector(selectIsVisible);\r\n  \r\n  return (\r\n    <div className=\"App\">\r\n     <Counter />\r\n          <TodoItem list={todoList} isVisible={isVisible.isVisible} />\r\n       </div>\r\n    \r\n  );\r\n}\r\n\r\nexport default App;\r\n\r\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport counterReducer from '../features/counter/counterSlice';\r\n\r\nexport default configureStore({\r\n  reducer: {\r\n    todos: counterReducer,\r\n  },\r\n});\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport store from './app/store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nReactDOM.render(\r\n  <React.Fragment>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n    </React.Fragment>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}